#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

aws_profile=##set aws profile name

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
aws_local="aws --profile $aws_profile --endpoint-url http://localhost:4566"

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-s] [-r] [-h] [-v]

Script description here.

Available options:

-c, --create    Set up the LocalStack configuration for integration tests
-d, --delete    Clean up the LocalStack configuration
-h, --help      Print this help and exit
-v, --verbose   Print script debug info
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

# script logic here

create_document_table() {
  msg "creating docbox-document-table..."
  db=$($aws_local dynamodb create-table --cli-input-json file://create-docbox-document-table.json)
	msg "successful: creating docbox-document-table..."
}

insert_document_data() {
  msg "inserting document-data into table..."
  db=$($aws_local dynamodb put-item --table-name docbox-document --item file://docbox-document-items.json --return-consumed-capacity TOTAL)
  msg "successful: inserting document-data into table..."
}

delete_document_table() {
  msg "deleting docbox-document-table..."
  db=$($aws_local dynamodb delete-table --table-name docbox-document)
	msg "successful: deleting docbox-document-table..."
}

create_table() {
  create_document_table
}

insert_data() {
  insert_document_data
}

delete_table() {
  delete_document_table
}

create() {
  create_table
  insert_data
  exit
}

delete() {
  delete_table
  exit
}

parse_params() {
  # default values of variables set from params
  flag=0
  param=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -c | --create) create ;;
    -d | --delete) delete ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments use -h for help"

  return 0
}

setup_colors
parse_params "$@"