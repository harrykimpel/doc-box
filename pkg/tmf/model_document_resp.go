/*
Doc Box API

The intent of this API is to provide a consistent/standardized mechanism to create new documents, delete existing documents, retrieving information about uploaded documents. This Specification is based on TMF667 - Document Management Release 17.0.1 from November 2017.

API version: 0.0.1
Contact: https://github.com/torenken/doc-box
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmf

import (
	"encoding/json"
	"time"
)

// DocumentResp This is a document resource allowing meta-data and the information of the document model.
type DocumentResp struct {
	Links *Links `json:"_links,omitempty"`
	// Identifier of the document.
	Id string `json:"id"`
	// The lifecycleState of the document, such as Active.
	LifecycleState string `json:"lifecycleState"`
	// The date and time the document was created.
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Name of the document type
	Type *string `json:"type,omitempty"`
	// A string used to give a name to the document
	Name *string `json:"name,omitempty"`
}

// NewDocumentResp instantiates a new DocumentResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentResp(id string, lifecycleState string) *DocumentResp {
	this := DocumentResp{}
	return &this
}

// NewDocumentRespWithDefaults instantiates a new DocumentResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentRespWithDefaults() *DocumentResp {
	this := DocumentResp{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DocumentResp) GetLinks() Links {
	if o == nil || o.Links == nil {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentResp) GetLinksOk() (*Links, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DocumentResp) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *DocumentResp) SetLinks(v Links) {
	o.Links = &v
}

// GetId returns the Id field value
func (o *DocumentResp) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DocumentResp) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DocumentResp) SetId(v string) {
	o.Id = v
}

// GetLifecycleState returns the LifecycleState field value
func (o *DocumentResp) GetLifecycleState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LifecycleState
}

// GetLifecycleStateOk returns a tuple with the LifecycleState field value
// and a boolean to check if the value has been set.
func (o *DocumentResp) GetLifecycleStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LifecycleState, true
}

// SetLifecycleState sets field value
func (o *DocumentResp) SetLifecycleState(v string) {
	o.LifecycleState = v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *DocumentResp) GetCreationDate() time.Time {
	if o == nil || o.CreationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentResp) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *DocumentResp) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *DocumentResp) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DocumentResp) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentResp) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DocumentResp) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DocumentResp) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DocumentResp) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentResp) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DocumentResp) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DocumentResp) SetName(v string) {
	o.Name = &v
}

func (o DocumentResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["lifecycleState"] = o.LifecycleState
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentResp struct {
	value *DocumentResp
	isSet bool
}

func (v NullableDocumentResp) Get() *DocumentResp {
	return v.value
}

func (v *NullableDocumentResp) Set(val *DocumentResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentResp(val *DocumentResp) *NullableDocumentResp {
	return &NullableDocumentResp{value: val, isSet: true}
}

func (v NullableDocumentResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
