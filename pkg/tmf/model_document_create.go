/*
Doc Box API

The intent of this API is to provide a consistent/standardized mechanism to create new documents, delete existing documents, retrieving information about uploaded documents. This Specification is based on TMF667 - Document Management Release 17.0.1 from November 2017.

API version: 0.0.1
Contact: https://github.com/torenken/doc-box
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmf

import (
	"encoding/json"
)

// DocumentCreate This is the document resource when creating new documents
type DocumentCreate struct {
	// Name of the document type
	Type *string `json:"type,omitempty"`
	// A string used to give a name to the document
	Name *string `json:"name,omitempty"`
}

// NewDocumentCreate instantiates a new DocumentCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentCreate() *DocumentCreate {
	this := DocumentCreate{}
	return &this
}

// NewDocumentCreateWithDefaults instantiates a new DocumentCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentCreateWithDefaults() *DocumentCreate {
	this := DocumentCreate{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DocumentCreate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCreate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DocumentCreate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DocumentCreate) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DocumentCreate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCreate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DocumentCreate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DocumentCreate) SetName(v string) {
	o.Name = &v
}

func (o DocumentCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentCreate struct {
	value *DocumentCreate
	isSet bool
}

func (v NullableDocumentCreate) Get() *DocumentCreate {
	return v.value
}

func (v *NullableDocumentCreate) Set(val *DocumentCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentCreate(val *DocumentCreate) *NullableDocumentCreate {
	return &NullableDocumentCreate{value: val, isSet: true}
}

func (v NullableDocumentCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
